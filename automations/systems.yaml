
- alias: "furnace filter date"
  trigger:
    platform: event
    event_type: furnace_filter_changed
  action:
    service: shell_command.furnacefilterdate

- alias: "Melodie Nightstand"
  trigger:
    platform: event
    event_type: nightstand_light_button
  action:
    service: switch.toggle
    entity_id: switch.melodie_nightstand




    


- alias: 'dummy'
  initial_state: True
  trigger:
    platform: state
    entity_id:  input_boolean.always_off
    from: 'off'
    to: 'on'
  action:
    service: homeassistant.turn_off
    entity_id: switch.dummy
  

    
# fire when weather alert changes to 1 show the group in the weather view

- alias: 'zz Weather alert 1'
  initial_state: True
  trigger:
    platform: state
    entity_id: sensor.pws_alerts
    from: '0'
    to: '1'
  action:
    service: group.set_visibility
    entity_id: group.weather_alert_group
    data:
      visible: True

# # fire when weather alert changes to 0 hide the group in the weather view

- alias: 'zz Weather alert 0'
  initial_state: True
  trigger:
    platform: state
    entity_id: sensor.pws_alerts
    from: '1'
    to: '0'
  action:
    service: group.set_visibility
    entity_id: group.weather_alert_group
    data:
      visible: False
# fire when HA restarts and Hide aert group if no active alert

- alias: 'zz Weatheralert hide on HA start if no active alert'
  initial_state: True
  hide_entity: False
  trigger:
      platform: homeassistant
      event: start
  condition:
    condition: state
    entity_id: sensor.pws_alerts
    state: '0'
  action:
    service: group.set_visibility
    entity_id: group.weather_alert_group
    data:
      visible: False





      
- alias: 'xx ios msg counts'
  initial_state: True
  trigger:
    platform: event
    event_type: call_service
    event_data:
      domain: notify
      service: ios_michaels_iphone
  action:
    # putting the delay ensure that the event makes it to the log in the event this is the first notify
    - delay: 00:00:05
    - service: shell_command.iosnotifycount

#call_service|{"domain": "notify", "service": "ios_michaels_iphone", "service_data": {"message": "Here i

- alias: 'zzz LR sensor power reset'
  initial_state: True
  trigger :
    platform: state
    entity_id: binary_sensor.living_room_gw
    from: 'on'
    to: 'off'
  condition:
    condition: state
    entity_id: switch.patio_outlet
    state: 'on'
  action:
    - service: homeassistant.turn_off
      entity_id: switch.patio_outlet
    - service: homeassistant.turn_on
      entity_id: switch.patio_outlet


- alias: 'Alexa annnouncement testing'
  initial_state: false
  trigger:
    platform: state
    entity_id: input_boolean.always_on
    from: 'off'
    to: 'on'          
  action:
    - service: logbook.log
      data_template:
        name: "Send annoncement to   ==> "
        message: >-
          {% if is_state("binary_sensor.occupied_den", "on") -%}
          {% set player = 'media_player.den' %}
          {% set found = 'on'%}
          {%- endif %}
          {%- if is_state("binary_sensor.occupied_master", "on") -%}
          {%- if found == 'on' -%}  
          {% set player = (player ~ ", media_player.bedroom") %}
          {% else %}
          {% set player = "media_player.bedroom" %}
          {%- endif %}
          {% else %}
          {% set player = "media_player.main" %}
          {%- endif %}
          {{- player -}}     




 
 #- alias: 'zzz toggle automations off'
#  initial_state: True
#  trigger:
#    platform: state
#    entity_id: input_boolean.on_vaca
#    from: 'off'
#    to: 'on'
#  action:
#    - service: homeassistant.turn_off
#      entity_id: group.automations_to_toggle_g

#- alias: 'zzz toggle automations on'
#  initial_state: True
#  trigger:
#    platform: state
#    entity_id: input_boolean.on_vaca
#    from: 'on'
#    to: 'off'
#  action:
#    - service: homeassistant.turn_on
#      entity_id: group.automations_to_toggle_

 
 # #-autodoc
# #-autodoc        name:
# #-autodoc description:
# #-autodoc        file:
# #-autodoc
# - alias: Something opened
#   trigger:
#     platform: state
#     entity_id: !secret openings_to_watch
#     from: 'off'
#     to: 'on'
#   action:
#     service: persistent_notification.create
#     data_template:
#       message: ' {{states.sensor.date__time.state}} - {{ trigger.from_state.attributes.friendly_name}} has been opened'
#       title: "Something Opened"
# - alias: Something closed
#   trigger:
#     platform: state
#     entity_id: !secret openings_to_watch
#     from: 'on'
#     to: 'off'
#   action:
#     service: persistent_notification.create
#     data_template:
#       message:  ' {{states.sensor.date__time.state}} - {{ trigger.from_state.attributes.friendly_name}} has been closed'
#       title: "Something Closed"